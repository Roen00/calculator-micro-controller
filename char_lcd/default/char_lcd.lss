
char_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000c12  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800090  00800090  00000cd6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001bb  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5b  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000355  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c9  00000000  00000000  00001c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042b  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 01 	call	0x220	; 0x220 <main>
  8a:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getADC>:
//-------------------------------------

int getADC(char channel)
{
unsigned int W = 0;
ADMUX |= channel;
  92:	97 b1       	in	r25, 0x07	; 7
  94:	98 2b       	or	r25, r24
  96:	97 b9       	out	0x07, r25	; 7
ADCSRA |= (1 << ADSC);
  98:	36 9a       	sbi	0x06, 6	; 6
while(ADCSRA & (1 << ADIF));
  9a:	34 99       	sbic	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <getADC+0x8>
ADCSRA |= (1 << ADIF);
  9e:	34 9a       	sbi	0x06, 4	; 6
W = ADCL;
  a0:	24 b1       	in	r18, 0x04	; 4
  a2:	30 e0       	ldi	r19, 0x00	; 0
W |= (ADCH << 8);
  a4:	45 b1       	in	r20, 0x05	; 5
  a6:	94 2f       	mov	r25, r20
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	28 2b       	or	r18, r24
  ac:	39 2b       	or	r19, r25
return W;
}
  ae:	c9 01       	movw	r24, r18
  b0:	08 95       	ret

000000b2 <ADC_Init>:
//-------------------------------------
// ADC Initialization
//-------------------------------------
void ADC_Init(void)
{
ADMUX = (1 << REFS0);
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 
  b6:	87 e8       	ldi	r24, 0x87	; 135
  b8:	86 b9       	out	0x06, r24	; 6
}
  ba:	08 95       	ret

000000bc <mappingLogToLinear>:

int signMap[] = {14,15};

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
  bc:	dc 01       	movw	r26, r24
  be:	fb 01       	movw	r30, r22
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <mappingLogToLinear+0x18>
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
  c6:	81 91       	ld	r24, Z+
  c8:	91 91       	ld	r25, Z+
  ca:	8a 17       	cp	r24, r26
  cc:	9b 07       	cpc	r25, r27
  ce:	44 f4       	brge	.+16     	; 0xe0 <mappingLogToLinear+0x24>

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	24 17       	cp	r18, r20
  d6:	35 07       	cpc	r19, r21
  d8:	b4 f3       	brlt	.-20     	; 0xc6 <mappingLogToLinear+0xa>
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
			return i;
		}
	}
	return length - 1;
  da:	9a 01       	movw	r18, r20
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
}
  e0:	c9 01       	movw	r24, r18
  e2:	08 95       	ret

000000e4 <setNewValue>:
int lastValue = 0;
int newValue =0;
int sign = 1;


void setNewValue(int newDigit){
  e4:	9c 01       	movw	r18, r24
	int i;
	for(i = 0; i < power; i++){
  e6:	60 91 92 00 	lds	r22, 0x0092
  ea:	70 91 93 00 	lds	r23, 0x0093
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	0c c0       	rjmp	.+24     	; 0x10c <setNewValue+0x28>
		newDigit*=10;
  f4:	c9 01       	movw	r24, r18
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	e3 e0       	ldi	r30, 0x03	; 3
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	ea 95       	dec	r30
 102:	e1 f7       	brne	.-8      	; 0xfc <setNewValue+0x18>
 104:	28 0f       	add	r18, r24
 106:	39 1f       	adc	r19, r25
int sign = 1;


void setNewValue(int newDigit){
	int i;
	for(i = 0; i < power; i++){
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	46 17       	cp	r20, r22
 10e:	57 07       	cpc	r21, r23
 110:	8c f3       	brlt	.-30     	; 0xf4 <setNewValue+0x10>
		newDigit*=10;
	}

	newValue+=newDigit;
 112:	80 91 96 00 	lds	r24, 0x0096
 116:	90 91 97 00 	lds	r25, 0x0097
 11a:	82 0f       	add	r24, r18
 11c:	93 1f       	adc	r25, r19
 11e:	90 93 97 00 	sts	0x0097, r25
 122:	80 93 96 00 	sts	0x0096, r24
	power++;
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	70 93 93 00 	sts	0x0093, r23
 12e:	60 93 92 00 	sts	0x0092, r22
}
 132:	08 95       	ret

00000134 <increaseState>:
void increaseState(){
	if(state < 3) {
 134:	80 91 90 00 	lds	r24, 0x0090
 138:	90 91 91 00 	lds	r25, 0x0091
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	91 05       	cpc	r25, r1
 140:	34 f4       	brge	.+12     	; 0x14e <increaseState+0x1a>
		state++;
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 91 00 	sts	0x0091, r25
 148:	80 93 90 00 	sts	0x0090, r24
 14c:	04 c0       	rjmp	.+8      	; 0x156 <increaseState+0x22>
	}else{
		state = 0;
 14e:	10 92 91 00 	sts	0x0091, r1
 152:	10 92 90 00 	sts	0x0090, r1
	}
	power = 0;
 156:	10 92 93 00 	sts	0x0093, r1
 15a:	10 92 92 00 	sts	0x0092, r1
}
 15e:	08 95       	ret

00000160 <doCalculations>:
void doCalculations(int expression){
	switch(expression){
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	c1 f0       	breq	.+48     	; 0x196 <doCalculations+0x36>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	91 05       	cpc	r25, r1
 16a:	1c f4       	brge	.+6      	; 0x172 <doCalculations+0x12>
 16c:	89 2b       	or	r24, r25
 16e:	41 f0       	breq	.+16     	; 0x180 <doCalculations+0x20>
 170:	08 95       	ret
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	d1 f0       	breq	.+52     	; 0x1ac <doCalculations+0x4c>
 178:	03 97       	sbiw	r24, 0x03	; 3
 17a:	09 f0       	breq	.+2      	; 0x17e <doCalculations+0x1e>
 17c:	42 c0       	rjmp	.+132    	; 0x202 <doCalculations+0xa2>
 17e:	2b c0       	rjmp	.+86     	; 0x1d6 <doCalculations+0x76>
		case 0:
			lastValue+=newValue;
 180:	80 91 94 00 	lds	r24, 0x0094
 184:	90 91 95 00 	lds	r25, 0x0095
 188:	20 91 96 00 	lds	r18, 0x0096
 18c:	30 91 97 00 	lds	r19, 0x0097
 190:	82 0f       	add	r24, r18
 192:	93 1f       	adc	r25, r19
 194:	1b c0       	rjmp	.+54     	; 0x1cc <doCalculations+0x6c>
			break;
		case 1:
			lastValue-=newValue;
 196:	80 91 94 00 	lds	r24, 0x0094
 19a:	90 91 95 00 	lds	r25, 0x0095
 19e:	20 91 96 00 	lds	r18, 0x0096
 1a2:	30 91 97 00 	lds	r19, 0x0097
 1a6:	82 1b       	sub	r24, r18
 1a8:	93 0b       	sbc	r25, r19
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <doCalculations+0x6c>
			break;
		case 2:
			lastValue*=newValue;
 1ac:	80 91 94 00 	lds	r24, 0x0094
 1b0:	90 91 95 00 	lds	r25, 0x0095
 1b4:	20 91 96 00 	lds	r18, 0x0096
 1b8:	30 91 97 00 	lds	r19, 0x0097
 1bc:	ac 01       	movw	r20, r24
 1be:	42 9f       	mul	r20, r18
 1c0:	c0 01       	movw	r24, r0
 1c2:	43 9f       	mul	r20, r19
 1c4:	90 0d       	add	r25, r0
 1c6:	52 9f       	mul	r21, r18
 1c8:	90 0d       	add	r25, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	90 93 95 00 	sts	0x0095, r25
 1d0:	80 93 94 00 	sts	0x0094, r24
 1d4:	08 95       	ret
			break;
		case 3:
			if(newValue == 0) lastValue = 0;
 1d6:	60 91 96 00 	lds	r22, 0x0096
 1da:	70 91 97 00 	lds	r23, 0x0097
 1de:	61 15       	cp	r22, r1
 1e0:	71 05       	cpc	r23, r1
 1e2:	29 f4       	brne	.+10     	; 0x1ee <doCalculations+0x8e>
 1e4:	10 92 95 00 	sts	0x0095, r1
 1e8:	10 92 94 00 	sts	0x0094, r1
 1ec:	08 95       	ret
			else lastValue/=newValue;
 1ee:	80 91 94 00 	lds	r24, 0x0094
 1f2:	90 91 95 00 	lds	r25, 0x0095
 1f6:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
 1fa:	70 93 95 00 	sts	0x0095, r23
 1fe:	60 93 94 00 	sts	0x0094, r22
 202:	08 95       	ret

00000204 <setSign>:
			break;
	}
}
void setSign(int sign){
	if(sign==0){
 204:	89 2b       	or	r24, r25
 206:	59 f4       	brne	.+22     	; 0x21e <setSign+0x1a>
		newValue= newValue*(-1);
 208:	80 91 96 00 	lds	r24, 0x0096
 20c:	90 91 97 00 	lds	r25, 0x0097
 210:	90 95       	com	r25
 212:	81 95       	neg	r24
 214:	9f 4f       	sbci	r25, 0xFF	; 255
 216:	90 93 97 00 	sts	0x0097, r25
 21a:	80 93 96 00 	sts	0x0096, r24
 21e:	08 95       	ret

00000220 <main>:




int main(void)
{
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	1f 93       	push	r17
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	2f 97       	sbiw	r28, 0x0f	; 15
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
char temp, i;
LCD_Initialize();
 246:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Initialize>
DDRB = 0b00000000;
 24a:	17 ba       	out	0x17, r1	; 23
PORTB = 0b00001111;
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	88 bb       	out	0x18, r24	; 24

DDRA = 0xFF;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	8a bb       	out	0x1a, r24	; 26
//-------------------------------------
// ADC Initialization
//-------------------------------------
void ADC_Init(void)
{
ADMUX = (1 << REFS0);
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 
 258:	87 e8       	ldi	r24, 0x87	; 135
 25a:	86 b9       	out	0x06, r24	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25c:	b0 e9       	ldi	r27, 0x90	; 144
 25e:	ab 2e       	mov	r10, r27
 260:	b1 e0       	ldi	r27, 0x01	; 1
 262:	bb 2e       	mov	r11, r27
	

	  char str[15];


	  sprintf(str, "%15d", lastValue);
 264:	6e 01       	movw	r12, r28
 266:	08 94       	sec
 268:	c1 1c       	adc	r12, r1
 26a:	d1 1c       	adc	r13, r1
 26c:	a0 e6       	ldi	r26, 0x60	; 96
 26e:	8a 2e       	mov	r8, r26
 270:	a0 e0       	ldi	r26, 0x00	; 0
 272:	9a 2e       	mov	r9, r26



	do{

	int digit  = getADC(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 49 00 	call	0x92	; 0x92 <getADC>
 27a:	7c 01       	movw	r14, r24

	char sw0 = PINB & 0b00000001;
 27c:	86 b3       	in	r24, 0x16	; 22
	char sw1 = PINB & 0b00000010;
 27e:	16 b3       	in	r17, 0x16	; 22
 280:	12 70       	andi	r17, 0x02	; 2
	if(sw0 != 0b00000001) {
 282:	80 fd       	sbrc	r24, 0
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <main+0x86>
		state++;
 286:	80 91 90 00 	lds	r24, 0x0090
 28a:	90 91 91 00 	lds	r25, 0x0091
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 91 00 	sts	0x0091, r25
 294:	80 93 90 00 	sts	0x0090, r24
 298:	88 eb       	ldi	r24, 0xB8	; 184
 29a:	9b e0       	ldi	r25, 0x0B	; 11
 29c:	f5 01       	movw	r30, r10
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x7e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a4:	d9 f7       	brne	.-10     	; 0x29c <main+0x7c>
	

	  char str[15];


	  sprintf(str, "%15d", lastValue);
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <main+0x88>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <main+0x8a>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <main+0x8c>
 2ac:	ed b7       	in	r30, 0x3d	; 61
 2ae:	fe b7       	in	r31, 0x3e	; 62
 2b0:	31 96       	adiw	r30, 0x01	; 1
 2b2:	ad b7       	in	r26, 0x3d	; 61
 2b4:	be b7       	in	r27, 0x3e	; 62
 2b6:	12 96       	adiw	r26, 0x02	; 2
 2b8:	dc 92       	st	X, r13
 2ba:	ce 92       	st	-X, r12
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	93 82       	std	Z+3, r9	; 0x03
 2c0:	82 82       	std	Z+2, r8	; 0x02
 2c2:	80 91 94 00 	lds	r24, 0x0094
 2c6:	90 91 95 00 	lds	r25, 0x0095
 2ca:	95 83       	std	Z+5, r25	; 0x05
 2cc:	84 83       	std	Z+4, r24	; 0x04
 2ce:	0e 94 2f 03 	call	0x65e	; 0x65e <sprintf>
	LCD_GoTo(1,0);
 2d2:	8d b7       	in	r24, 0x3d	; 61
 2d4:	9e b7       	in	r25, 0x3e	; 62
 2d6:	06 96       	adiw	r24, 0x06	; 6
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	9e bf       	out	0x3e, r25	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	8d bf       	out	0x3d, r24	; 61
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
	LCD_WriteText(str);
 2ea:	c6 01       	movw	r24, r12
 2ec:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_WriteText>


	switch(state){
 2f0:	80 91 90 00 	lds	r24, 0x0090
 2f4:	90 91 91 00 	lds	r25, 0x0091
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	09 f4       	brne	.+2      	; 0x300 <main+0xe0>
 2fe:	57 c0       	rjmp	.+174    	; 0x3ae <main+0x18e>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	91 05       	cpc	r25, r1
 304:	09 f4       	brne	.+2      	; 0x308 <main+0xe8>
 306:	72 c0       	rjmp	.+228    	; 0x3ec <main+0x1cc>
 308:	89 2b       	or	r24, r25
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0xee>
 30c:	b3 cf       	rjmp	.-154    	; 0x274 <main+0x54>
		case 0:		
			if(sw1 != 0b00000010){
 30e:	12 30       	cpi	r17, 0x02	; 2
 310:	29 f4       	brne	.+10     	; 0x31c <main+0xfc>
 312:	ed e6       	ldi	r30, 0x6D	; 109
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	1c c0       	rjmp	.+56     	; 0x354 <main+0x134>
 31c:	ed e6       	ldi	r30, 0x6D	; 109
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
 324:	80 81       	ld	r24, Z
 326:	91 81       	ldd	r25, Z+1	; 0x01
 328:	8e 15       	cp	r24, r14
 32a:	9f 05       	cpc	r25, r15
 32c:	44 f4       	brge	.+16     	; 0x33e <main+0x11e>

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	32 96       	adiw	r30, 0x02	; 2
 334:	2a 30       	cpi	r18, 0x0A	; 10
 336:	31 05       	cpc	r19, r1
 338:	a9 f7       	brne	.-22     	; 0x324 <main+0x104>
 33a:	29 e0       	ldi	r18, 0x09	; 9
 33c:	30 e0       	ldi	r19, 0x00	; 0


	switch(state){
		case 0:		
			if(sw1 != 0b00000010){
				setNewValue(mappingLogToLinear(digit, digitMap, 10));			
 33e:	c9 01       	movw	r24, r18
 340:	0e 94 72 00 	call	0xe4	; 0xe4 <setNewValue>
 344:	88 eb       	ldi	r24, 0xB8	; 184
 346:	9b e0       	ldi	r25, 0x0B	; 11
 348:	f5 01       	movw	r30, r10
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 350:	d9 f7       	brne	.-10     	; 0x348 <main+0x128>
 352:	df cf       	rjmp	.-66     	; 0x312 <main+0xf2>

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
 354:	80 81       	ld	r24, Z
 356:	91 81       	ldd	r25, Z+1	; 0x01
 358:	8e 15       	cp	r24, r14
 35a:	9f 05       	cpc	r25, r15
 35c:	44 f4       	brge	.+16     	; 0x36e <main+0x14e>

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	32 96       	adiw	r30, 0x02	; 2
 364:	2a 30       	cpi	r18, 0x0A	; 10
 366:	31 05       	cpc	r19, r1
 368:	a9 f7       	brne	.-22     	; 0x354 <main+0x134>
 36a:	29 e0       	ldi	r18, 0x09	; 9
 36c:	30 e0       	ldi	r19, 0x00	; 0
		case 0:		
			if(sw1 != 0b00000010){
				setNewValue(mappingLogToLinear(digit, digitMap, 10));			
				_delay_ms(300);
			}
				sprintf(str, "%15d", mappingLogToLinear(digit, digitMap,10));
 36e:	00 d0       	rcall	.+0      	; 0x370 <main+0x150>
 370:	00 d0       	rcall	.+0      	; 0x372 <main+0x152>
 372:	00 d0       	rcall	.+0      	; 0x374 <main+0x154>
 374:	ed b7       	in	r30, 0x3d	; 61
 376:	fe b7       	in	r31, 0x3e	; 62
 378:	31 96       	adiw	r30, 0x01	; 1
 37a:	ad b7       	in	r26, 0x3d	; 61
 37c:	be b7       	in	r27, 0x3e	; 62
 37e:	12 96       	adiw	r26, 0x02	; 2
 380:	dc 92       	st	X, r13
 382:	ce 92       	st	-X, r12
 384:	11 97       	sbiw	r26, 0x01	; 1
 386:	93 82       	std	Z+3, r9	; 0x03
 388:	82 82       	std	Z+2, r8	; 0x02
 38a:	35 83       	std	Z+5, r19	; 0x05
 38c:	24 83       	std	Z+4, r18	; 0x04
 38e:	0e 94 2f 03 	call	0x65e	; 0x65e <sprintf>
				LCD_GoTo(1,1);
 392:	8d b7       	in	r24, 0x3d	; 61
 394:	9e b7       	in	r25, 0x3e	; 62
 396:	06 96       	adiw	r24, 0x06	; 6
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	9e bf       	out	0x3e, r25	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	8d bf       	out	0x3d, r24	; 61
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
				LCD_WriteText(str);	
 3aa:	c6 01       	movw	r24, r12
 3ac:	92 c0       	rjmp	.+292    	; 0x4d2 <main+0x2b2>
			break;
		case 1:
			if(sw1 != 0b00000010){
 3ae:	12 30       	cpi	r17, 0x02	; 2
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <main+0x1a4>

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
 3b2:	80 91 81 00 	lds	r24, 0x0081
 3b6:	90 91 82 00 	lds	r25, 0x0082
 3ba:	8e 15       	cp	r24, r14
 3bc:	9f 05       	cpc	r25, r15
 3be:	0c f4       	brge	.+2      	; 0x3c2 <main+0x1a2>
 3c0:	61 c0       	rjmp	.+194    	; 0x484 <main+0x264>
 3c2:	81 c0       	rjmp	.+258    	; 0x4c6 <main+0x2a6>
				LCD_WriteText(str);	
			break;
		case 1:
			if(sw1 != 0b00000010){
				setSign(mappingLogToLinear(digit, signMap, 2));
				power = 0;				
 3c4:	80 91 81 00 	lds	r24, 0x0081
 3c8:	90 91 82 00 	lds	r25, 0x0082
 3cc:	8e 15       	cp	r24, r14
 3ce:	9f 05       	cpc	r25, r15
 3d0:	0c f0       	brlt	.+2      	; 0x3d4 <main+0x1b4>
 3d2:	6d c0       	rjmp	.+218    	; 0x4ae <main+0x28e>
 3d4:	10 92 93 00 	sts	0x0093, r1
 3d8:	10 92 92 00 	sts	0x0092, r1
 3dc:	88 eb       	ldi	r24, 0xB8	; 184
 3de:	9b e0       	ldi	r25, 0x0B	; 11
 3e0:	f5 01       	movw	r30, r10
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e8:	d9 f7       	brne	.-10     	; 0x3e0 <main+0x1c0>
 3ea:	e3 cf       	rjmp	.-58     	; 0x3b2 <main+0x192>
					LCD_WriteText("+");
					break;
				}
			break;
		case 2:
			if(sw1 != 0b00000010){
 3ec:	12 30       	cpi	r17, 0x02	; 2
 3ee:	29 f4       	brne	.+10     	; 0x3fa <main+0x1da>
 3f0:	e5 e8       	ldi	r30, 0x85	; 133
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	28 c0       	rjmp	.+80     	; 0x44a <main+0x22a>
 3fa:	e5 e8       	ldi	r30, 0x85	; 133
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	30 e0       	ldi	r19, 0x00	; 0

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
 402:	80 81       	ld	r24, Z
 404:	91 81       	ldd	r25, Z+1	; 0x01
 406:	8e 15       	cp	r24, r14
 408:	9f 05       	cpc	r25, r15
 40a:	44 f4       	brge	.+16     	; 0x41c <main+0x1fc>

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	32 96       	adiw	r30, 0x02	; 2
 412:	24 30       	cpi	r18, 0x04	; 4
 414:	31 05       	cpc	r19, r1
 416:	a9 f7       	brne	.-22     	; 0x402 <main+0x1e2>
 418:	23 e0       	ldi	r18, 0x03	; 3
 41a:	30 e0       	ldi	r19, 0x00	; 0
					break;
				}
			break;
		case 2:
			if(sw1 != 0b00000010){
				doCalculations(mappingLogToLinear(digit, expressionMap, 4));
 41c:	c9 01       	movw	r24, r18
 41e:	0e 94 b0 00 	call	0x160	; 0x160 <doCalculations>
				power = 0;
 422:	10 92 93 00 	sts	0x0093, r1
 426:	10 92 92 00 	sts	0x0092, r1
				newValue=0;
 42a:	10 92 97 00 	sts	0x0097, r1
 42e:	10 92 96 00 	sts	0x0096, r1
				state = 0;			
 432:	10 92 91 00 	sts	0x0091, r1
 436:	10 92 90 00 	sts	0x0090, r1
 43a:	88 eb       	ldi	r24, 0xB8	; 184
 43c:	9b e0       	ldi	r25, 0x0B	; 11
 43e:	f5 01       	movw	r30, r10
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <main+0x220>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 444:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 446:	d9 f7       	brne	.-10     	; 0x43e <main+0x21e>
 448:	d3 cf       	rjmp	.-90     	; 0x3f0 <main+0x1d0>

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
		//std::cout<<logValue<<">"<<map[i]<<std::endl;
		if(map[i] >= logValue) {
 44a:	80 81       	ld	r24, Z
 44c:	91 81       	ldd	r25, Z+1	; 0x01
 44e:	8e 15       	cp	r24, r14
 450:	9f 05       	cpc	r25, r15
 452:	3c f4       	brge	.+14     	; 0x462 <main+0x242>

int expressionMap[] = {3,9,30,850};

int mappingLogToLinear(int logValue, int* map, int length) {
	int i;
	for(i = 0; i < length; i++) {
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	32 96       	adiw	r30, 0x02	; 2
 45a:	24 30       	cpi	r18, 0x04	; 4
 45c:	31 05       	cpc	r19, r1
 45e:	a9 f7       	brne	.-22     	; 0x44a <main+0x22a>
 460:	1f c0       	rjmp	.+62     	; 0x4a0 <main+0x280>
				newValue=0;
				state = 0;			
				_delay_ms(300);
			}
				
				switch(mappingLogToLinear(digit, expressionMap,4)){
 462:	21 30       	cpi	r18, 0x01	; 1
 464:	31 05       	cpc	r19, r1
 466:	79 f1       	breq	.+94     	; 0x4c6 <main+0x2a6>
 468:	22 30       	cpi	r18, 0x02	; 2
 46a:	31 05       	cpc	r19, r1
 46c:	1c f4       	brge	.+6      	; 0x474 <main+0x254>
 46e:	23 2b       	or	r18, r19
 470:	49 f0       	breq	.+18     	; 0x484 <main+0x264>
 472:	00 cf       	rjmp	.-512    	; 0x274 <main+0x54>
 474:	22 30       	cpi	r18, 0x02	; 2
 476:	31 05       	cpc	r19, r1
 478:	61 f0       	breq	.+24     	; 0x492 <main+0x272>
 47a:	23 30       	cpi	r18, 0x03	; 3
 47c:	31 05       	cpc	r19, r1
 47e:	09 f0       	breq	.+2      	; 0x482 <main+0x262>
 480:	f9 ce       	rjmp	.-526    	; 0x274 <main+0x54>
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <main+0x280>
					case 0:
					LCD_GoTo(1,1);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
					LCD_WriteText("+");
 48c:	85 e6       	ldi	r24, 0x65	; 101
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	20 c0       	rjmp	.+64     	; 0x4d2 <main+0x2b2>
					case 1:
					LCD_GoTo(1,1);
					LCD_WriteText("-");
					break;
					case 2:
					LCD_GoTo(1,1);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
					LCD_WriteText("*");
 49a:	89 e6       	ldi	r24, 0x69	; 105
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	19 c0       	rjmp	.+50     	; 0x4d2 <main+0x2b2>
					break;
					case 3:
					LCD_GoTo(1,1);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
					LCD_WriteText("/");
 4a8:	8b e6       	ldi	r24, 0x6B	; 107
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <main+0x2b2>
			break;
	}
}
void setSign(int sign){
	if(sign==0){
		newValue= newValue*(-1);
 4ae:	80 91 96 00 	lds	r24, 0x0096
 4b2:	90 91 97 00 	lds	r25, 0x0097
 4b6:	90 95       	com	r25
 4b8:	81 95       	neg	r24
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	90 93 97 00 	sts	0x0097, r25
 4c0:	80 93 96 00 	sts	0x0096, r24
 4c4:	87 cf       	rjmp	.-242    	; 0x3d4 <main+0x1b4>
				power = 0;				
				_delay_ms(300);
			}
				switch(mappingLogToLinear(digit, signMap,2)){
					case 0:
					LCD_GoTo(1,1);
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_GoTo>
					LCD_WriteText("-");
 4ce:	87 e6       	ldi	r24, 0x67	; 103
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_WriteText>
 4d6:	ce ce       	rjmp	.-612    	; 0x274 <main+0x54>

000004d8 <_LCD_OutNibble>:
//-------------------------------------
// Write half byte
//-------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 4d8:	80 ff       	sbrs	r24, 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
 4dc:	da 9a       	sbi	0x1b, 2	; 27
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 4e0:	da 98       	cbi	0x1b, 2	; 27

if(nibbleToWrite & 0x02)
 4e2:	81 ff       	sbrs	r24, 1
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
 4e6:	db 9a       	sbi	0x1b, 3	; 27
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 4ea:	db 98       	cbi	0x1b, 3	; 27

if(nibbleToWrite & 0x04)
 4ec:	82 ff       	sbrs	r24, 2
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
 4f0:	dc 9a       	sbi	0x1b, 4	; 27
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 4f4:	dc 98       	cbi	0x1b, 4	; 27

if(nibbleToWrite & 0x08)
 4f6:	83 ff       	sbrs	r24, 3
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
 4fa:	dd 9a       	sbi	0x1b, 5	; 27
 4fc:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 4fe:	dd 98       	cbi	0x1b, 5	; 27
 500:	08 95       	ret

00000502 <_LCD_Write>:
}
//-------------------------------------
// Write byte
//-------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
 502:	1f 93       	push	r17
 504:	18 2f       	mov	r17, r24
LCD_E_PORT |= LCD_E;
 506:	de 9a       	sbi	0x1b, 6	; 27
_LCD_OutNibble(dataToWrite >> 4);
 508:	82 95       	swap	r24
 50a:	8f 70       	andi	r24, 0x0F	; 15
 50c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 510:	de 98       	cbi	0x1b, 6	; 27
LCD_E_PORT |= LCD_E;
 512:	de 9a       	sbi	0x1b, 6	; 27
_LCD_OutNibble(dataToWrite);
 514:	81 2f       	mov	r24, r17
 516:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 51a:	de 98       	cbi	0x1b, 6	; 27
 51c:	88 ec       	ldi	r24, 0xC8	; 200
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <_LCD_Write+0x1e>
_delay_us(50);
}
 524:	1f 91       	pop	r17
 526:	08 95       	ret

00000528 <LCD_WriteCommand>:
//-------------------------------------
// Write to command register
//-------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 528:	df 98       	cbi	0x1b, 7	; 27
_LCD_Write(commandToWrite);
 52a:	0e 94 81 02 	call	0x502	; 0x502 <_LCD_Write>
}
 52e:	08 95       	ret

00000530 <LCD_WriteData>:
//-------------------------------------
// Write to data register
//-------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 530:	df 9a       	sbi	0x1b, 7	; 27
_LCD_Write(dataToWrite);
 532:	0e 94 81 02 	call	0x502	; 0x502 <_LCD_Write>
}
 536:	08 95       	ret

00000538 <LCD_WriteText>:
//-------------------------------------
// Write text
//-------------------------------------
void LCD_WriteText(char * text)
{
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ec 01       	movw	r28, r24
 53e:	03 c0       	rjmp	.+6      	; 0x546 <LCD_WriteText+0xe>
while(*text)
  LCD_WriteData(*text++);
 540:	21 96       	adiw	r28, 0x01	; 1
 542:	0e 94 98 02 	call	0x530	; 0x530 <LCD_WriteData>
//-------------------------------------
// Write text
//-------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
 546:	88 81       	ld	r24, Y
 548:	88 23       	and	r24, r24
 54a:	d1 f7       	brne	.-12     	; 0x540 <LCD_WriteText+0x8>
  LCD_WriteData(*text++);
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <LCD_GoTo>:
//-------------------------------------
// Set display coordinates
//-------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 552:	62 95       	swap	r22
 554:	66 0f       	add	r22, r22
 556:	66 0f       	add	r22, r22
 558:	60 7c       	andi	r22, 0xC0	; 192
 55a:	68 0f       	add	r22, r24
 55c:	86 2f       	mov	r24, r22
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
}
 564:	08 95       	ret

00000566 <LCD_Clear>:
//-------------------------------------
// Clear display
//-------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
 56c:	80 e4       	ldi	r24, 0x40	; 64
 56e:	9f e1       	ldi	r25, 0x1F	; 31
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_Clear+0xa>
_delay_ms(2);
}
 574:	08 95       	ret

00000576 <LCD_Home>:
//-------------------------------------
// Set home position
//-------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
 57c:	80 e4       	ldi	r24, 0x40	; 64
 57e:	9f e1       	ldi	r25, 0x1F	; 31
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_Home+0xa>
_delay_ms(2);
}
 584:	08 95       	ret

00000586 <LCD_ShiftLeft>:
//-------------------------------------
// Shift display left
//-------------------------------------
void LCD_ShiftLeft(void)
{
LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_LEFT | HD44780_SHIFT_DISPLAY);
 586:	88 e1       	ldi	r24, 0x18	; 24
 588:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
}
 58c:	08 95       	ret

0000058e <LCD_ShiftRight>:
//-------------------------------------
// Shift display right
//-------------------------------------
void LCD_ShiftRight(void)
{
LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
 58e:	8c e1       	ldi	r24, 0x1C	; 28
 590:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
}
 594:	08 95       	ret

00000596 <LCD_Initialize>:
//-------------------------------------
// Display initialization
//-------------------------------------
void LCD_Initialize(void)
{
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; 
 59c:	d2 9a       	sbi	0x1a, 2	; 26
LCD_DB5_DIR |= LCD_DB5; 
 59e:	d3 9a       	sbi	0x1a, 3	; 26
LCD_DB6_DIR |= LCD_DB6; 
 5a0:	d4 9a       	sbi	0x1a, 4	; 26
LCD_DB7_DIR |= LCD_DB7; 
 5a2:	d5 9a       	sbi	0x1a, 5	; 26
LCD_E_DIR 	|= LCD_E;   
 5a4:	d6 9a       	sbi	0x1a, 6	; 26
LCD_RS_DIR 	|= LCD_RS;  
 5a6:	d7 9a       	sbi	0x1a, 7	; 26
 5a8:	80 e6       	ldi	r24, 0x60	; 96
 5aa:	9a ee       	ldi	r25, 0xEA	; 234
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_Initialize+0x16>
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
 5b0:	df 98       	cbi	0x1b, 7	; 27
LCD_E_PORT &= ~LCD_E;  
 5b2:	de 98       	cbi	0x1b, 6	; 27
 5b4:	10 e0       	ldi	r17, 0x00	; 0
 5b6:	c0 e2       	ldi	r28, 0x20	; 32
 5b8:	de e4       	ldi	r29, 0x4E	; 78

for(i = 0; i < 3; i++)
  {
  LCD_E_PORT |= LCD_E; 
 5ba:	de 9a       	sbi	0x1b, 6	; 27
  _LCD_OutNibble(0x03); 
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; 
 5c2:	de 98       	cbi	0x1b, 6	; 27
 5c4:	ce 01       	movw	r24, r28
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <LCD_Initialize+0x30>
LCD_RS_DIR 	|= LCD_RS;  
_delay_ms(15); 
LCD_RS_PORT &= ~LCD_RS; 
LCD_E_PORT &= ~LCD_E;  

for(i = 0; i < 3; i++)
 5ca:	1f 5f       	subi	r17, 0xFF	; 255
 5cc:	13 30       	cpi	r17, 0x03	; 3
 5ce:	a9 f7       	brne	.-22     	; 0x5ba <LCD_Initialize+0x24>
  _LCD_OutNibble(0x03); 
  LCD_E_PORT &= ~LCD_E; 
  _delay_ms(5); 
  }

LCD_E_PORT |= LCD_E; 
 5d0:	de 9a       	sbi	0x1b, 6	; 27
_LCD_OutNibble(0x02); 
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; 
 5d8:	de 98       	cbi	0x1b, 6	; 27
 5da:	80 ea       	ldi	r24, 0xA0	; 160
 5dc:	9f e0       	ldi	r25, 0x0F	; 15
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	f1 f7       	brne	.-4      	; 0x5de <LCD_Initialize+0x48>

_delay_ms(1); 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); 
 5e2:	88 e2       	ldi	r24, 0x28	; 40
 5e4:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); 
 5e8:	88 e0       	ldi	r24, 0x08	; 8
 5ea:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); 
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
 5f4:	80 e4       	ldi	r24, 0x40	; 64
 5f6:	9f e1       	ldi	r25, 0x1F	; 31
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Initialize+0x62>
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 602:	8c e0       	ldi	r24, 0x0C	; 12
 604:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteCommand>
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	08 95       	ret

00000610 <__divmodhi4>:
 610:	97 fb       	bst	r25, 7
 612:	09 2e       	mov	r0, r25
 614:	07 26       	eor	r0, r23
 616:	0a d0       	rcall	.+20     	; 0x62c <__divmodhi4_neg1>
 618:	77 fd       	sbrc	r23, 7
 61a:	04 d0       	rcall	.+8      	; 0x624 <__divmodhi4_neg2>
 61c:	0c d0       	rcall	.+24     	; 0x636 <__udivmodhi4>
 61e:	06 d0       	rcall	.+12     	; 0x62c <__divmodhi4_neg1>
 620:	00 20       	and	r0, r0
 622:	1a f4       	brpl	.+6      	; 0x62a <__divmodhi4_exit>

00000624 <__divmodhi4_neg2>:
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255

0000062a <__divmodhi4_exit>:
 62a:	08 95       	ret

0000062c <__divmodhi4_neg1>:
 62c:	f6 f7       	brtc	.-4      	; 0x62a <__divmodhi4_exit>
 62e:	90 95       	com	r25
 630:	81 95       	neg	r24
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__udivmodhi4>:
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	51 e1       	ldi	r21, 0x11	; 17
 63c:	07 c0       	rjmp	.+14     	; 0x64c <__udivmodhi4_ep>

0000063e <__udivmodhi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	a6 17       	cp	r26, r22
 644:	b7 07       	cpc	r27, r23
 646:	10 f0       	brcs	.+4      	; 0x64c <__udivmodhi4_ep>
 648:	a6 1b       	sub	r26, r22
 64a:	b7 0b       	sbc	r27, r23

0000064c <__udivmodhi4_ep>:
 64c:	88 1f       	adc	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	5a 95       	dec	r21
 652:	a9 f7       	brne	.-22     	; 0x63e <__udivmodhi4_loop>
 654:	80 95       	com	r24
 656:	90 95       	com	r25
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	08 95       	ret

0000065e <sprintf>:
 65e:	ae e0       	ldi	r26, 0x0E	; 14
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e5 e3       	ldi	r30, 0x35	; 53
 664:	f3 e0       	ldi	r31, 0x03	; 3
 666:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__prologue_saves__+0x1c>
 66a:	0d 89       	ldd	r16, Y+21	; 0x15
 66c:	1e 89       	ldd	r17, Y+22	; 0x16
 66e:	86 e0       	ldi	r24, 0x06	; 6
 670:	8c 83       	std	Y+4, r24	; 0x04
 672:	1a 83       	std	Y+2, r17	; 0x02
 674:	09 83       	std	Y+1, r16	; 0x01
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	9f e7       	ldi	r25, 0x7F	; 127
 67a:	9e 83       	std	Y+6, r25	; 0x06
 67c:	8d 83       	std	Y+5, r24	; 0x05
 67e:	9e 01       	movw	r18, r28
 680:	27 5e       	subi	r18, 0xE7	; 231
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	ce 01       	movw	r24, r28
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	6f 89       	ldd	r22, Y+23	; 0x17
 68a:	78 8d       	ldd	r23, Y+24	; 0x18
 68c:	a9 01       	movw	r20, r18
 68e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <vfprintf>
 692:	2f 81       	ldd	r18, Y+7	; 0x07
 694:	38 85       	ldd	r19, Y+8	; 0x08
 696:	02 0f       	add	r16, r18
 698:	13 1f       	adc	r17, r19
 69a:	f8 01       	movw	r30, r16
 69c:	10 82       	st	Z, r1
 69e:	2e 96       	adiw	r28, 0x0e	; 14
 6a0:	e4 e0       	ldi	r30, 0x04	; 4
 6a2:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__epilogue_restores__+0x1c>

000006a6 <vfprintf>:
 6a6:	ab e0       	ldi	r26, 0x0B	; 11
 6a8:	b0 e0       	ldi	r27, 0x00	; 0
 6aa:	e9 e5       	ldi	r30, 0x59	; 89
 6ac:	f3 e0       	ldi	r31, 0x03	; 3
 6ae:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__prologue_saves__>
 6b2:	3c 01       	movw	r6, r24
 6b4:	2b 01       	movw	r4, r22
 6b6:	5a 01       	movw	r10, r20
 6b8:	fc 01       	movw	r30, r24
 6ba:	17 82       	std	Z+7, r1	; 0x07
 6bc:	16 82       	std	Z+6, r1	; 0x06
 6be:	83 81       	ldd	r24, Z+3	; 0x03
 6c0:	81 fd       	sbrc	r24, 1
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x24>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	c6 c1       	rjmp	.+908    	; 0xa56 <__stack+0x1f7>
 6ca:	9a e0       	ldi	r25, 0x0A	; 10
 6cc:	89 2e       	mov	r8, r25
 6ce:	1e 01       	movw	r2, r28
 6d0:	08 94       	sec
 6d2:	21 1c       	adc	r2, r1
 6d4:	31 1c       	adc	r3, r1
 6d6:	f3 01       	movw	r30, r6
 6d8:	23 81       	ldd	r18, Z+3	; 0x03
 6da:	f2 01       	movw	r30, r4
 6dc:	23 fd       	sbrc	r18, 3
 6de:	85 91       	lpm	r24, Z+
 6e0:	23 ff       	sbrs	r18, 3
 6e2:	81 91       	ld	r24, Z+
 6e4:	2f 01       	movw	r4, r30
 6e6:	88 23       	and	r24, r24
 6e8:	09 f4       	brne	.+2      	; 0x6ec <vfprintf+0x46>
 6ea:	b2 c1       	rjmp	.+868    	; 0xa50 <__stack+0x1f1>
 6ec:	85 32       	cpi	r24, 0x25	; 37
 6ee:	39 f4       	brne	.+14     	; 0x6fe <vfprintf+0x58>
 6f0:	23 fd       	sbrc	r18, 3
 6f2:	85 91       	lpm	r24, Z+
 6f4:	23 ff       	sbrs	r18, 3
 6f6:	81 91       	ld	r24, Z+
 6f8:	2f 01       	movw	r4, r30
 6fa:	85 32       	cpi	r24, 0x25	; 37
 6fc:	29 f4       	brne	.+10     	; 0x708 <vfprintf+0x62>
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	b3 01       	movw	r22, r6
 702:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 706:	e7 cf       	rjmp	.-50     	; 0x6d6 <vfprintf+0x30>
 708:	98 2f       	mov	r25, r24
 70a:	ff 24       	eor	r15, r15
 70c:	ee 24       	eor	r14, r14
 70e:	99 24       	eor	r9, r9
 710:	ff e1       	ldi	r31, 0x1F	; 31
 712:	ff 15       	cp	r31, r15
 714:	d0 f0       	brcs	.+52     	; 0x74a <vfprintf+0xa4>
 716:	9b 32       	cpi	r25, 0x2B	; 43
 718:	69 f0       	breq	.+26     	; 0x734 <vfprintf+0x8e>
 71a:	9c 32       	cpi	r25, 0x2C	; 44
 71c:	28 f4       	brcc	.+10     	; 0x728 <vfprintf+0x82>
 71e:	90 32       	cpi	r25, 0x20	; 32
 720:	59 f0       	breq	.+22     	; 0x738 <vfprintf+0x92>
 722:	93 32       	cpi	r25, 0x23	; 35
 724:	91 f4       	brne	.+36     	; 0x74a <vfprintf+0xa4>
 726:	0e c0       	rjmp	.+28     	; 0x744 <vfprintf+0x9e>
 728:	9d 32       	cpi	r25, 0x2D	; 45
 72a:	49 f0       	breq	.+18     	; 0x73e <vfprintf+0x98>
 72c:	90 33       	cpi	r25, 0x30	; 48
 72e:	69 f4       	brne	.+26     	; 0x74a <vfprintf+0xa4>
 730:	41 e0       	ldi	r20, 0x01	; 1
 732:	24 c0       	rjmp	.+72     	; 0x77c <vfprintf+0xd6>
 734:	52 e0       	ldi	r21, 0x02	; 2
 736:	f5 2a       	or	r15, r21
 738:	84 e0       	ldi	r24, 0x04	; 4
 73a:	f8 2a       	or	r15, r24
 73c:	28 c0       	rjmp	.+80     	; 0x78e <vfprintf+0xe8>
 73e:	98 e0       	ldi	r25, 0x08	; 8
 740:	f9 2a       	or	r15, r25
 742:	25 c0       	rjmp	.+74     	; 0x78e <vfprintf+0xe8>
 744:	e0 e1       	ldi	r30, 0x10	; 16
 746:	fe 2a       	or	r15, r30
 748:	22 c0       	rjmp	.+68     	; 0x78e <vfprintf+0xe8>
 74a:	f7 fc       	sbrc	r15, 7
 74c:	29 c0       	rjmp	.+82     	; 0x7a0 <vfprintf+0xfa>
 74e:	89 2f       	mov	r24, r25
 750:	80 53       	subi	r24, 0x30	; 48
 752:	8a 30       	cpi	r24, 0x0A	; 10
 754:	70 f4       	brcc	.+28     	; 0x772 <vfprintf+0xcc>
 756:	f6 fe       	sbrs	r15, 6
 758:	05 c0       	rjmp	.+10     	; 0x764 <vfprintf+0xbe>
 75a:	98 9c       	mul	r9, r8
 75c:	90 2c       	mov	r9, r0
 75e:	11 24       	eor	r1, r1
 760:	98 0e       	add	r9, r24
 762:	15 c0       	rjmp	.+42     	; 0x78e <vfprintf+0xe8>
 764:	e8 9c       	mul	r14, r8
 766:	e0 2c       	mov	r14, r0
 768:	11 24       	eor	r1, r1
 76a:	e8 0e       	add	r14, r24
 76c:	f0 e2       	ldi	r31, 0x20	; 32
 76e:	ff 2a       	or	r15, r31
 770:	0e c0       	rjmp	.+28     	; 0x78e <vfprintf+0xe8>
 772:	9e 32       	cpi	r25, 0x2E	; 46
 774:	29 f4       	brne	.+10     	; 0x780 <vfprintf+0xda>
 776:	f6 fc       	sbrc	r15, 6
 778:	6b c1       	rjmp	.+726    	; 0xa50 <__stack+0x1f1>
 77a:	40 e4       	ldi	r20, 0x40	; 64
 77c:	f4 2a       	or	r15, r20
 77e:	07 c0       	rjmp	.+14     	; 0x78e <vfprintf+0xe8>
 780:	9c 36       	cpi	r25, 0x6C	; 108
 782:	19 f4       	brne	.+6      	; 0x78a <vfprintf+0xe4>
 784:	50 e8       	ldi	r21, 0x80	; 128
 786:	f5 2a       	or	r15, r21
 788:	02 c0       	rjmp	.+4      	; 0x78e <vfprintf+0xe8>
 78a:	98 36       	cpi	r25, 0x68	; 104
 78c:	49 f4       	brne	.+18     	; 0x7a0 <vfprintf+0xfa>
 78e:	f2 01       	movw	r30, r4
 790:	23 fd       	sbrc	r18, 3
 792:	95 91       	lpm	r25, Z+
 794:	23 ff       	sbrs	r18, 3
 796:	91 91       	ld	r25, Z+
 798:	2f 01       	movw	r4, r30
 79a:	99 23       	and	r25, r25
 79c:	09 f0       	breq	.+2      	; 0x7a0 <vfprintf+0xfa>
 79e:	b8 cf       	rjmp	.-144    	; 0x710 <vfprintf+0x6a>
 7a0:	89 2f       	mov	r24, r25
 7a2:	85 54       	subi	r24, 0x45	; 69
 7a4:	83 30       	cpi	r24, 0x03	; 3
 7a6:	18 f0       	brcs	.+6      	; 0x7ae <vfprintf+0x108>
 7a8:	80 52       	subi	r24, 0x20	; 32
 7aa:	83 30       	cpi	r24, 0x03	; 3
 7ac:	38 f4       	brcc	.+14     	; 0x7bc <vfprintf+0x116>
 7ae:	44 e0       	ldi	r20, 0x04	; 4
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	a4 0e       	add	r10, r20
 7b4:	b5 1e       	adc	r11, r21
 7b6:	5f e3       	ldi	r21, 0x3F	; 63
 7b8:	59 83       	std	Y+1, r21	; 0x01
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <vfprintf+0x134>
 7bc:	93 36       	cpi	r25, 0x63	; 99
 7be:	31 f0       	breq	.+12     	; 0x7cc <vfprintf+0x126>
 7c0:	93 37       	cpi	r25, 0x73	; 115
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0x13c>
 7c4:	93 35       	cpi	r25, 0x53	; 83
 7c6:	09 f0       	breq	.+2      	; 0x7ca <vfprintf+0x124>
 7c8:	56 c0       	rjmp	.+172    	; 0x876 <__stack+0x17>
 7ca:	20 c0       	rjmp	.+64     	; 0x80c <vfprintf+0x166>
 7cc:	f5 01       	movw	r30, r10
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	42 e0       	ldi	r20, 0x02	; 2
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	a4 0e       	add	r10, r20
 7d8:	b5 1e       	adc	r11, r21
 7da:	61 01       	movw	r12, r2
 7dc:	01 e0       	ldi	r16, 0x01	; 1
 7de:	10 e0       	ldi	r17, 0x00	; 0
 7e0:	12 c0       	rjmp	.+36     	; 0x806 <vfprintf+0x160>
 7e2:	f5 01       	movw	r30, r10
 7e4:	c0 80       	ld	r12, Z
 7e6:	d1 80       	ldd	r13, Z+1	; 0x01
 7e8:	f6 fc       	sbrc	r15, 6
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <vfprintf+0x14c>
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	7f ef       	ldi	r23, 0xFF	; 255
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <vfprintf+0x150>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	42 e0       	ldi	r20, 0x02	; 2
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	a4 0e       	add	r10, r20
 7fc:	b5 1e       	adc	r11, r21
 7fe:	c6 01       	movw	r24, r12
 800:	0e 94 3b 05 	call	0xa76	; 0xa76 <strnlen>
 804:	8c 01       	movw	r16, r24
 806:	5f e7       	ldi	r21, 0x7F	; 127
 808:	f5 22       	and	r15, r21
 80a:	14 c0       	rjmp	.+40     	; 0x834 <vfprintf+0x18e>
 80c:	f5 01       	movw	r30, r10
 80e:	c0 80       	ld	r12, Z
 810:	d1 80       	ldd	r13, Z+1	; 0x01
 812:	f6 fc       	sbrc	r15, 6
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x176>
 816:	6f ef       	ldi	r22, 0xFF	; 255
 818:	7f ef       	ldi	r23, 0xFF	; 255
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x17a>
 81c:	69 2d       	mov	r22, r9
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	42 e0       	ldi	r20, 0x02	; 2
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	a4 0e       	add	r10, r20
 826:	b5 1e       	adc	r11, r21
 828:	c6 01       	movw	r24, r12
 82a:	0e 94 30 05 	call	0xa60	; 0xa60 <strnlen_P>
 82e:	8c 01       	movw	r16, r24
 830:	50 e8       	ldi	r21, 0x80	; 128
 832:	f5 2a       	or	r15, r21
 834:	f3 fe       	sbrs	r15, 3
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x1a0>
 838:	1a c0       	rjmp	.+52     	; 0x86e <__stack+0xf>
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	b3 01       	movw	r22, r6
 840:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 844:	ea 94       	dec	r14
 846:	8e 2d       	mov	r24, r14
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	08 17       	cp	r16, r24
 84c:	19 07       	cpc	r17, r25
 84e:	a8 f3       	brcs	.-22     	; 0x83a <vfprintf+0x194>
 850:	0e c0       	rjmp	.+28     	; 0x86e <__stack+0xf>
 852:	f6 01       	movw	r30, r12
 854:	f7 fc       	sbrc	r15, 7
 856:	85 91       	lpm	r24, Z+
 858:	f7 fe       	sbrs	r15, 7
 85a:	81 91       	ld	r24, Z+
 85c:	6f 01       	movw	r12, r30
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	b3 01       	movw	r22, r6
 862:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 866:	e1 10       	cpse	r14, r1
 868:	ea 94       	dec	r14
 86a:	01 50       	subi	r16, 0x01	; 1
 86c:	10 40       	sbci	r17, 0x00	; 0
 86e:	01 15       	cp	r16, r1
 870:	11 05       	cpc	r17, r1
 872:	79 f7       	brne	.-34     	; 0x852 <vfprintf+0x1ac>
 874:	ea c0       	rjmp	.+468    	; 0xa4a <__stack+0x1eb>
 876:	94 36       	cpi	r25, 0x64	; 100
 878:	11 f0       	breq	.+4      	; 0x87e <__stack+0x1f>
 87a:	99 36       	cpi	r25, 0x69	; 105
 87c:	69 f5       	brne	.+90     	; 0x8d8 <__stack+0x79>
 87e:	f7 fe       	sbrs	r15, 7
 880:	08 c0       	rjmp	.+16     	; 0x892 <__stack+0x33>
 882:	f5 01       	movw	r30, r10
 884:	20 81       	ld	r18, Z
 886:	31 81       	ldd	r19, Z+1	; 0x01
 888:	42 81       	ldd	r20, Z+2	; 0x02
 88a:	53 81       	ldd	r21, Z+3	; 0x03
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <__stack+0x47>
 892:	f5 01       	movw	r30, r10
 894:	80 81       	ld	r24, Z
 896:	91 81       	ldd	r25, Z+1	; 0x01
 898:	9c 01       	movw	r18, r24
 89a:	44 27       	eor	r20, r20
 89c:	37 fd       	sbrc	r19, 7
 89e:	40 95       	com	r20
 8a0:	54 2f       	mov	r21, r20
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	a8 0e       	add	r10, r24
 8a8:	b9 1e       	adc	r11, r25
 8aa:	9f e6       	ldi	r25, 0x6F	; 111
 8ac:	f9 22       	and	r15, r25
 8ae:	57 ff       	sbrs	r21, 7
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
 8b2:	50 95       	com	r21
 8b4:	40 95       	com	r20
 8b6:	30 95       	com	r19
 8b8:	21 95       	neg	r18
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	4f 4f       	sbci	r20, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	e0 e8       	ldi	r30, 0x80	; 128
 8c2:	fe 2a       	or	r15, r30
 8c4:	ca 01       	movw	r24, r20
 8c6:	b9 01       	movw	r22, r18
 8c8:	a1 01       	movw	r20, r2
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	0e 94 72 05 	call	0xae4	; 0xae4 <__ultoa_invert>
 8d2:	d8 2e       	mov	r13, r24
 8d4:	d2 18       	sub	r13, r2
 8d6:	40 c0       	rjmp	.+128    	; 0x958 <__stack+0xf9>
 8d8:	95 37       	cpi	r25, 0x75	; 117
 8da:	29 f4       	brne	.+10     	; 0x8e6 <__stack+0x87>
 8dc:	1f 2d       	mov	r17, r15
 8de:	1f 7e       	andi	r17, 0xEF	; 239
 8e0:	2a e0       	ldi	r18, 0x0A	; 10
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	1d c0       	rjmp	.+58     	; 0x920 <__stack+0xc1>
 8e6:	1f 2d       	mov	r17, r15
 8e8:	19 7f       	andi	r17, 0xF9	; 249
 8ea:	9f 36       	cpi	r25, 0x6F	; 111
 8ec:	61 f0       	breq	.+24     	; 0x906 <__stack+0xa7>
 8ee:	90 37       	cpi	r25, 0x70	; 112
 8f0:	20 f4       	brcc	.+8      	; 0x8fa <__stack+0x9b>
 8f2:	98 35       	cpi	r25, 0x58	; 88
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__stack+0x99>
 8f6:	ac c0       	rjmp	.+344    	; 0xa50 <__stack+0x1f1>
 8f8:	0f c0       	rjmp	.+30     	; 0x918 <__stack+0xb9>
 8fa:	90 37       	cpi	r25, 0x70	; 112
 8fc:	39 f0       	breq	.+14     	; 0x90c <__stack+0xad>
 8fe:	98 37       	cpi	r25, 0x78	; 120
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0xa5>
 902:	a6 c0       	rjmp	.+332    	; 0xa50 <__stack+0x1f1>
 904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xaf>
 906:	28 e0       	ldi	r18, 0x08	; 8
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	0a c0       	rjmp	.+20     	; 0x920 <__stack+0xc1>
 90c:	10 61       	ori	r17, 0x10	; 16
 90e:	14 fd       	sbrc	r17, 4
 910:	14 60       	ori	r17, 0x04	; 4
 912:	20 e1       	ldi	r18, 0x10	; 16
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	04 c0       	rjmp	.+8      	; 0x920 <__stack+0xc1>
 918:	14 fd       	sbrc	r17, 4
 91a:	16 60       	ori	r17, 0x06	; 6
 91c:	20 e1       	ldi	r18, 0x10	; 16
 91e:	32 e0       	ldi	r19, 0x02	; 2
 920:	17 ff       	sbrs	r17, 7
 922:	08 c0       	rjmp	.+16     	; 0x934 <__stack+0xd5>
 924:	f5 01       	movw	r30, r10
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	82 81       	ldd	r24, Z+2	; 0x02
 92c:	93 81       	ldd	r25, Z+3	; 0x03
 92e:	44 e0       	ldi	r20, 0x04	; 4
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	08 c0       	rjmp	.+16     	; 0x944 <__stack+0xe5>
 934:	f5 01       	movw	r30, r10
 936:	80 81       	ld	r24, Z
 938:	91 81       	ldd	r25, Z+1	; 0x01
 93a:	bc 01       	movw	r22, r24
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	42 e0       	ldi	r20, 0x02	; 2
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	a4 0e       	add	r10, r20
 946:	b5 1e       	adc	r11, r21
 948:	a1 01       	movw	r20, r2
 94a:	0e 94 72 05 	call	0xae4	; 0xae4 <__ultoa_invert>
 94e:	d8 2e       	mov	r13, r24
 950:	d2 18       	sub	r13, r2
 952:	8f e7       	ldi	r24, 0x7F	; 127
 954:	f8 2e       	mov	r15, r24
 956:	f1 22       	and	r15, r17
 958:	f6 fe       	sbrs	r15, 6
 95a:	0b c0       	rjmp	.+22     	; 0x972 <__stack+0x113>
 95c:	5e ef       	ldi	r21, 0xFE	; 254
 95e:	f5 22       	and	r15, r21
 960:	d9 14       	cp	r13, r9
 962:	38 f4       	brcc	.+14     	; 0x972 <__stack+0x113>
 964:	f4 fe       	sbrs	r15, 4
 966:	07 c0       	rjmp	.+14     	; 0x976 <__stack+0x117>
 968:	f2 fc       	sbrc	r15, 2
 96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
 96c:	8f ee       	ldi	r24, 0xEF	; 239
 96e:	f8 22       	and	r15, r24
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x117>
 972:	1d 2d       	mov	r17, r13
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x119>
 976:	19 2d       	mov	r17, r9
 978:	f4 fe       	sbrs	r15, 4
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__stack+0x137>
 97c:	fe 01       	movw	r30, r28
 97e:	ed 0d       	add	r30, r13
 980:	f1 1d       	adc	r31, r1
 982:	80 81       	ld	r24, Z
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	19 f4       	brne	.+6      	; 0x98e <__stack+0x12f>
 988:	99 ee       	ldi	r25, 0xE9	; 233
 98a:	f9 22       	and	r15, r25
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x13f>
 98e:	1f 5f       	subi	r17, 0xFF	; 255
 990:	f2 fe       	sbrs	r15, 2
 992:	05 c0       	rjmp	.+10     	; 0x99e <__stack+0x13f>
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x13d>
 996:	8f 2d       	mov	r24, r15
 998:	86 78       	andi	r24, 0x86	; 134
 99a:	09 f0       	breq	.+2      	; 0x99e <__stack+0x13f>
 99c:	1f 5f       	subi	r17, 0xFF	; 255
 99e:	0f 2d       	mov	r16, r15
 9a0:	f3 fc       	sbrc	r15, 3
 9a2:	14 c0       	rjmp	.+40     	; 0x9cc <__stack+0x16d>
 9a4:	f0 fe       	sbrs	r15, 0
 9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <__stack+0x167>
 9a8:	1e 15       	cp	r17, r14
 9aa:	10 f0       	brcs	.+4      	; 0x9b0 <__stack+0x151>
 9ac:	9d 2c       	mov	r9, r13
 9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <__stack+0x167>
 9b0:	9d 2c       	mov	r9, r13
 9b2:	9e 0c       	add	r9, r14
 9b4:	91 1a       	sub	r9, r17
 9b6:	1e 2d       	mov	r17, r14
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0x167>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	b3 01       	movw	r22, r6
 9c0:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 9c4:	1f 5f       	subi	r17, 0xFF	; 255
 9c6:	1e 15       	cp	r17, r14
 9c8:	c0 f3       	brcs	.-16     	; 0x9ba <__stack+0x15b>
 9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__stack+0x175>
 9cc:	1e 15       	cp	r17, r14
 9ce:	10 f4       	brcc	.+4      	; 0x9d4 <__stack+0x175>
 9d0:	e1 1a       	sub	r14, r17
 9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <__stack+0x177>
 9d4:	ee 24       	eor	r14, r14
 9d6:	04 ff       	sbrs	r16, 4
 9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <__stack+0x199>
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	b3 01       	movw	r22, r6
 9e0:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 9e4:	02 ff       	sbrs	r16, 2
 9e6:	1d c0       	rjmp	.+58     	; 0xa22 <__stack+0x1c3>
 9e8:	01 fd       	sbrc	r16, 1
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0x193>
 9ec:	88 e7       	ldi	r24, 0x78	; 120
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e c0       	rjmp	.+28     	; 0xa0e <__stack+0x1af>
 9f2:	88 e5       	ldi	r24, 0x58	; 88
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0b c0       	rjmp	.+22     	; 0xa0e <__stack+0x1af>
 9f8:	80 2f       	mov	r24, r16
 9fa:	86 78       	andi	r24, 0x86	; 134
 9fc:	91 f0       	breq	.+36     	; 0xa22 <__stack+0x1c3>
 9fe:	01 ff       	sbrs	r16, 1
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x1a7>
 a02:	8b e2       	ldi	r24, 0x2B	; 43
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <__stack+0x1a9>
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	f7 fc       	sbrc	r15, 7
 a0a:	8d e2       	ldi	r24, 0x2D	; 45
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	b3 01       	movw	r22, r6
 a10:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <__stack+0x1c3>
 a16:	80 e3       	ldi	r24, 0x30	; 48
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	b3 01       	movw	r22, r6
 a1c:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a20:	9a 94       	dec	r9
 a22:	d9 14       	cp	r13, r9
 a24:	c0 f3       	brcs	.-16     	; 0xa16 <__stack+0x1b7>
 a26:	da 94       	dec	r13
 a28:	f1 01       	movw	r30, r2
 a2a:	ed 0d       	add	r30, r13
 a2c:	f1 1d       	adc	r31, r1
 a2e:	80 81       	ld	r24, Z
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	b3 01       	movw	r22, r6
 a34:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a38:	dd 20       	and	r13, r13
 a3a:	a9 f7       	brne	.-22     	; 0xa26 <__stack+0x1c7>
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <__stack+0x1eb>
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	b3 01       	movw	r22, r6
 a44:	0e 94 46 05 	call	0xa8c	; 0xa8c <fputc>
 a48:	ea 94       	dec	r14
 a4a:	ee 20       	and	r14, r14
 a4c:	c1 f7       	brne	.-16     	; 0xa3e <__stack+0x1df>
 a4e:	43 ce       	rjmp	.-890    	; 0x6d6 <vfprintf+0x30>
 a50:	f3 01       	movw	r30, r6
 a52:	66 81       	ldd	r22, Z+6	; 0x06
 a54:	77 81       	ldd	r23, Z+7	; 0x07
 a56:	cb 01       	movw	r24, r22
 a58:	2b 96       	adiw	r28, 0x0b	; 11
 a5a:	e2 e1       	ldi	r30, 0x12	; 18
 a5c:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__epilogue_restores__>

00000a60 <strnlen_P>:
 a60:	fc 01       	movw	r30, r24
 a62:	05 90       	lpm	r0, Z+
 a64:	61 50       	subi	r22, 0x01	; 1
 a66:	70 40       	sbci	r23, 0x00	; 0
 a68:	01 10       	cpse	r0, r1
 a6a:	d8 f7       	brcc	.-10     	; 0xa62 <strnlen_P+0x2>
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	8e 0f       	add	r24, r30
 a72:	9f 1f       	adc	r25, r31
 a74:	08 95       	ret

00000a76 <strnlen>:
 a76:	fc 01       	movw	r30, r24
 a78:	61 50       	subi	r22, 0x01	; 1
 a7a:	70 40       	sbci	r23, 0x00	; 0
 a7c:	01 90       	ld	r0, Z+
 a7e:	01 10       	cpse	r0, r1
 a80:	d8 f7       	brcc	.-10     	; 0xa78 <strnlen+0x2>
 a82:	80 95       	com	r24
 a84:	90 95       	com	r25
 a86:	8e 0f       	add	r24, r30
 a88:	9f 1f       	adc	r25, r31
 a8a:	08 95       	ret

00000a8c <fputc>:
 a8c:	0f 93       	push	r16
 a8e:	1f 93       	push	r17
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	8c 01       	movw	r16, r24
 a96:	eb 01       	movw	r28, r22
 a98:	8b 81       	ldd	r24, Y+3	; 0x03
 a9a:	81 ff       	sbrs	r24, 1
 a9c:	1b c0       	rjmp	.+54     	; 0xad4 <fputc+0x48>
 a9e:	82 ff       	sbrs	r24, 2
 aa0:	0d c0       	rjmp	.+26     	; 0xabc <fputc+0x30>
 aa2:	2e 81       	ldd	r18, Y+6	; 0x06
 aa4:	3f 81       	ldd	r19, Y+7	; 0x07
 aa6:	8c 81       	ldd	r24, Y+4	; 0x04
 aa8:	9d 81       	ldd	r25, Y+5	; 0x05
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	64 f4       	brge	.+24     	; 0xac8 <fputc+0x3c>
 ab0:	e8 81       	ld	r30, Y
 ab2:	f9 81       	ldd	r31, Y+1	; 0x01
 ab4:	01 93       	st	Z+, r16
 ab6:	f9 83       	std	Y+1, r31	; 0x01
 ab8:	e8 83       	st	Y, r30
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <fputc+0x3c>
 abc:	e8 85       	ldd	r30, Y+8	; 0x08
 abe:	f9 85       	ldd	r31, Y+9	; 0x09
 ac0:	80 2f       	mov	r24, r16
 ac2:	09 95       	icall
 ac4:	89 2b       	or	r24, r25
 ac6:	31 f4       	brne	.+12     	; 0xad4 <fputc+0x48>
 ac8:	8e 81       	ldd	r24, Y+6	; 0x06
 aca:	9f 81       	ldd	r25, Y+7	; 0x07
 acc:	01 96       	adiw	r24, 0x01	; 1
 ace:	9f 83       	std	Y+7, r25	; 0x07
 ad0:	8e 83       	std	Y+6, r24	; 0x06
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <fputc+0x4c>
 ad4:	0f ef       	ldi	r16, 0xFF	; 255
 ad6:	1f ef       	ldi	r17, 0xFF	; 255
 ad8:	c8 01       	movw	r24, r16
 ada:	df 91       	pop	r29
 adc:	cf 91       	pop	r28
 ade:	1f 91       	pop	r17
 ae0:	0f 91       	pop	r16
 ae2:	08 95       	ret

00000ae4 <__ultoa_invert>:
 ae4:	fa 01       	movw	r30, r20
 ae6:	aa 27       	eor	r26, r26
 ae8:	28 30       	cpi	r18, 0x08	; 8
 aea:	51 f1       	breq	.+84     	; 0xb40 <__ultoa_invert+0x5c>
 aec:	20 31       	cpi	r18, 0x10	; 16
 aee:	81 f1       	breq	.+96     	; 0xb50 <__ultoa_invert+0x6c>
 af0:	e8 94       	clt
 af2:	6f 93       	push	r22
 af4:	6e 7f       	andi	r22, 0xFE	; 254
 af6:	6e 5f       	subi	r22, 0xFE	; 254
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	af 4f       	sbci	r26, 0xFF	; 255
 b00:	b1 e0       	ldi	r27, 0x01	; 1
 b02:	3e d0       	rcall	.+124    	; 0xb80 <__ultoa_invert+0x9c>
 b04:	b4 e0       	ldi	r27, 0x04	; 4
 b06:	3c d0       	rcall	.+120    	; 0xb80 <__ultoa_invert+0x9c>
 b08:	67 0f       	add	r22, r23
 b0a:	78 1f       	adc	r23, r24
 b0c:	89 1f       	adc	r24, r25
 b0e:	9a 1f       	adc	r25, r26
 b10:	a1 1d       	adc	r26, r1
 b12:	68 0f       	add	r22, r24
 b14:	79 1f       	adc	r23, r25
 b16:	8a 1f       	adc	r24, r26
 b18:	91 1d       	adc	r25, r1
 b1a:	a1 1d       	adc	r26, r1
 b1c:	6a 0f       	add	r22, r26
 b1e:	71 1d       	adc	r23, r1
 b20:	81 1d       	adc	r24, r1
 b22:	91 1d       	adc	r25, r1
 b24:	a1 1d       	adc	r26, r1
 b26:	20 d0       	rcall	.+64     	; 0xb68 <__ultoa_invert+0x84>
 b28:	09 f4       	brne	.+2      	; 0xb2c <__ultoa_invert+0x48>
 b2a:	68 94       	set
 b2c:	3f 91       	pop	r19
 b2e:	2a e0       	ldi	r18, 0x0A	; 10
 b30:	26 9f       	mul	r18, r22
 b32:	11 24       	eor	r1, r1
 b34:	30 19       	sub	r19, r0
 b36:	30 5d       	subi	r19, 0xD0	; 208
 b38:	31 93       	st	Z+, r19
 b3a:	de f6       	brtc	.-74     	; 0xaf2 <__ultoa_invert+0xe>
 b3c:	cf 01       	movw	r24, r30
 b3e:	08 95       	ret
 b40:	46 2f       	mov	r20, r22
 b42:	47 70       	andi	r20, 0x07	; 7
 b44:	40 5d       	subi	r20, 0xD0	; 208
 b46:	41 93       	st	Z+, r20
 b48:	b3 e0       	ldi	r27, 0x03	; 3
 b4a:	0f d0       	rcall	.+30     	; 0xb6a <__ultoa_invert+0x86>
 b4c:	c9 f7       	brne	.-14     	; 0xb40 <__ultoa_invert+0x5c>
 b4e:	f6 cf       	rjmp	.-20     	; 0xb3c <__ultoa_invert+0x58>
 b50:	46 2f       	mov	r20, r22
 b52:	4f 70       	andi	r20, 0x0F	; 15
 b54:	40 5d       	subi	r20, 0xD0	; 208
 b56:	4a 33       	cpi	r20, 0x3A	; 58
 b58:	18 f0       	brcs	.+6      	; 0xb60 <__ultoa_invert+0x7c>
 b5a:	49 5d       	subi	r20, 0xD9	; 217
 b5c:	31 fd       	sbrc	r19, 1
 b5e:	40 52       	subi	r20, 0x20	; 32
 b60:	41 93       	st	Z+, r20
 b62:	02 d0       	rcall	.+4      	; 0xb68 <__ultoa_invert+0x84>
 b64:	a9 f7       	brne	.-22     	; 0xb50 <__ultoa_invert+0x6c>
 b66:	ea cf       	rjmp	.-44     	; 0xb3c <__ultoa_invert+0x58>
 b68:	b4 e0       	ldi	r27, 0x04	; 4
 b6a:	a6 95       	lsr	r26
 b6c:	97 95       	ror	r25
 b6e:	87 95       	ror	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	ba 95       	dec	r27
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__ultoa_invert+0x86>
 b78:	00 97       	sbiw	r24, 0x00	; 0
 b7a:	61 05       	cpc	r22, r1
 b7c:	71 05       	cpc	r23, r1
 b7e:	08 95       	ret
 b80:	9b 01       	movw	r18, r22
 b82:	ac 01       	movw	r20, r24
 b84:	0a 2e       	mov	r0, r26
 b86:	06 94       	lsr	r0
 b88:	57 95       	ror	r21
 b8a:	47 95       	ror	r20
 b8c:	37 95       	ror	r19
 b8e:	27 95       	ror	r18
 b90:	ba 95       	dec	r27
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__ultoa_invert+0xa2>
 b94:	62 0f       	add	r22, r18
 b96:	73 1f       	adc	r23, r19
 b98:	84 1f       	adc	r24, r20
 b9a:	95 1f       	adc	r25, r21
 b9c:	a0 1d       	adc	r26, r0
 b9e:	08 95       	ret

00000ba0 <__prologue_saves__>:
 ba0:	2f 92       	push	r2
 ba2:	3f 92       	push	r3
 ba4:	4f 92       	push	r4
 ba6:	5f 92       	push	r5
 ba8:	6f 92       	push	r6
 baa:	7f 92       	push	r7
 bac:	8f 92       	push	r8
 bae:	9f 92       	push	r9
 bb0:	af 92       	push	r10
 bb2:	bf 92       	push	r11
 bb4:	cf 92       	push	r12
 bb6:	df 92       	push	r13
 bb8:	ef 92       	push	r14
 bba:	ff 92       	push	r15
 bbc:	0f 93       	push	r16
 bbe:	1f 93       	push	r17
 bc0:	cf 93       	push	r28
 bc2:	df 93       	push	r29
 bc4:	cd b7       	in	r28, 0x3d	; 61
 bc6:	de b7       	in	r29, 0x3e	; 62
 bc8:	ca 1b       	sub	r28, r26
 bca:	db 0b       	sbc	r29, r27
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	f8 94       	cli
 bd0:	de bf       	out	0x3e, r29	; 62
 bd2:	0f be       	out	0x3f, r0	; 63
 bd4:	cd bf       	out	0x3d, r28	; 61
 bd6:	09 94       	ijmp

00000bd8 <__epilogue_restores__>:
 bd8:	2a 88       	ldd	r2, Y+18	; 0x12
 bda:	39 88       	ldd	r3, Y+17	; 0x11
 bdc:	48 88       	ldd	r4, Y+16	; 0x10
 bde:	5f 84       	ldd	r5, Y+15	; 0x0f
 be0:	6e 84       	ldd	r6, Y+14	; 0x0e
 be2:	7d 84       	ldd	r7, Y+13	; 0x0d
 be4:	8c 84       	ldd	r8, Y+12	; 0x0c
 be6:	9b 84       	ldd	r9, Y+11	; 0x0b
 be8:	aa 84       	ldd	r10, Y+10	; 0x0a
 bea:	b9 84       	ldd	r11, Y+9	; 0x09
 bec:	c8 84       	ldd	r12, Y+8	; 0x08
 bee:	df 80       	ldd	r13, Y+7	; 0x07
 bf0:	ee 80       	ldd	r14, Y+6	; 0x06
 bf2:	fd 80       	ldd	r15, Y+5	; 0x05
 bf4:	0c 81       	ldd	r16, Y+4	; 0x04
 bf6:	1b 81       	ldd	r17, Y+3	; 0x03
 bf8:	aa 81       	ldd	r26, Y+2	; 0x02
 bfa:	b9 81       	ldd	r27, Y+1	; 0x01
 bfc:	ce 0f       	add	r28, r30
 bfe:	d1 1d       	adc	r29, r1
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	ed 01       	movw	r28, r26
 c0c:	08 95       	ret

00000c0e <_exit>:
 c0e:	f8 94       	cli

00000c10 <__stop_program>:
 c10:	ff cf       	rjmp	.-2      	; 0xc10 <__stop_program>
